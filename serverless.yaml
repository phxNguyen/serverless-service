service: adhoc-tasks-scheduler

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30  # 30 seconds - sufficient for demo
  environment:
    STAGE: ${self:provider.stage}
    NODE_ENV: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Ref: AccountTopic

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  # Original scheduler demo
  ping:
    handler: src/handlers/ping.scheduledHandler
    events:
      - schedule:
          name: pingSchedule
          rate: rate(1 minute)  # Every minute for testing
          enabled: true
          input:
            type: "adhoc-task-demo"

  # Fan-out pattern demo functions
  account-svc:
    handler: src/handlers/account.handler
    environment:
      ACCOUNT_TOPIC_ARN:
        Ref: AccountTopic
    events:
      - http:
          path: /account/update
          method: post
          
  open-search-svc:
    handler: src/handlers/opensearch.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OpenSearchQueue, Arn]
          batchSize: 1
          
  patient-svc:
    handler: src/handlers/patient.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [PatientQueue, Arn]
          batchSize: 1
      
  # Optional HTTP endpoint for testing
  pingHttp:
    handler: src/handlers/ping.handler
    events:
      - http:
          path: /ping
          method: get

resources:
  Resources:
    # Fan-out pattern resources
    AccountTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-account-topic
        
    OpenSearchQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-opensearch-queue
        
    PatientQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-patient-queue
        
    # SNS subscriptions to connect queues to topic
    OpenSearchSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AccountTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [OpenSearchQueue, Arn]
          
    PatientSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AccountTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [PatientQueue, Arn]
          
    # Queue policies to allow SNS to send messages
    OpenSearchQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: OpenSearchQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [OpenSearchQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AccountTopic
                    
    PatientQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: PatientQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [PatientQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AccountTopic